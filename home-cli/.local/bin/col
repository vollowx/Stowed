//usr/bin/env c-script "$0" "$@"; exit $?
//
// vi: ft=c
// Origin:
// https://github.com/sentriz/dotfiles/blob/master/conf_common/.local/bin/col

// $ col [ in delim [ out delim ] ] [ col ... ]

// $ printf "%s\t%s\n" one two | col
// one	two
// $ printf "%s\t%s\n" one two | col 1 2
// one	two
// $ printf "%s\t%s\n" one two | col 2
// two
// $ printf "%s;%s\n" one two | col ';' 2
// two
// $ printf "%s;%s\n" one two | col ';' 1 2
// one	two
// $ printf "%s\t%s\t%s\n" 1 2 3 11 22 33 111 222 333 | col 2
// 2
// 22
// 222
// $ echo 1 2 3 4 5 | col ' ' -1
// 5
// $ echo 1:2:3 | col : . 1 2 3
// 1.2.3

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

static int is_number(const char *s) {
  if (!s || !*s)
    return 0;
  if (*s == '-')
    s++;
  while (*s)
    if (!isdigit(*s++))
      return 0;
  return 1;
}

static char *trim(char *s) {
  while (isspace(*s))
    s++;
  char *end = s + strlen(s) - 1;
  while (end > s && isspace(*end))
    *end-- = 0;
  return s;
}

int main(int argc, char *argv[]) {
  char *in_delim = "\t", *out_delim = "\t";
  int arg = 1;

  // Parse delimiters
  if (arg < argc && !is_number(argv[arg]))
    in_delim = argv[arg++];
  if (arg < argc && !is_number(argv[arg]))
    out_delim = argv[arg++];

  // Parse column indexes
  int cols[argc], ncols = 0;
  for (int i = arg; i < argc; i++) {
    if (is_number(argv[i])) {
      int val = atoi(argv[i]);
      if (val)
        cols[ncols++] = val;
    }
  }

  char line[8192];
  while (fgets(line, sizeof(line), stdin)) {
    // Remove newline
    line[strcspn(line, "\n")] = 0;

    // Split line into tokens
    char *tokens[256];
    int ntokens = 0;
    char *token = strtok(line, in_delim);
    while (token && ntokens < 256) {
      tokens[ntokens++] = trim(token);
      token = strtok(NULL, in_delim);
    }

    // Output selected columns or all
    if (ncols == 0) {
      for (int i = 0; i < ntokens; i++) {
        if (i > 0)
          printf("%s", out_delim);
        printf("%s", tokens[i]);
      }
    } else {
      int valid = 1;
      for (int i = 0; i < ncols && valid; i++) {
        int idx = cols[i];
        if (idx < 0)
          idx = ntokens + 1 + idx; // negative indexing
        if (idx <= 0 || idx > ntokens) {
          valid = 0;
          break;
        }
        if (i > 0)
          printf("%s", out_delim);
        printf("%s", tokens[idx - 1]);
      }
      if (!valid)
        continue; // skip invalid rows
    }
    printf("\n");
  }

  return 0;
}
